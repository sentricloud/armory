---
AWSTemplateFormatVersion: "2010-09-09"
Description: IAM User Password Policy

Metadata:
  TemplateInfo:
    Name: iam-settings-password-policy
    Description: IAM User Password Policy
    Version: 1.0.0
    Source: armory/iam/cfn/iam-settings-password-policy.yaml
    Note: Deploy to all accounts to default IAM user password complexity requirements
    Security Hub: IAM.15- Med, IAM.16 - Low
    LastUpdated: 20241206
    Nonce: 20241206

Parameters:
  HomeRegion:
    Description: Home Control Tower and Central Security Hub Region
    Type: String
    MinLength: 8

  NonceValue:
    Description: Random Identifier to force update of stackset resource
    Type: String

Conditions:
  cIsHomeRegion: !Equals [!Ref AWS::Region, !Ref HomeRegion] ## only launch global resources in single/home region

Resources:
  PasswordPolicyResource:
    Condition: cIsHomeRegion
    Type: Custom::IAMPolicyResource
    Properties:
      ServiceToken: !GetAtt PasswordPolicyFunction.Arn
      Region: !Ref HomeRegion

  PasswordPolicyFunction:
    Condition: cIsHomeRegion
    Type: AWS::Lambda::Function
    #checkov:skip=CKV_AWS_117:Lambda not in VPC
    #checkov:skip=CKV_AWS_116:Lambda not configured for DLQ
    #checkov:skip=CKV_AWS_115:Lambda not configured for function-level concurrent execution limit
    Properties:
      Runtime: python3.12
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt PasswordPolicyFunctionExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          iam = boto3.client("iam")
          # Lambda entry point
          def lambda_handler(event, context):
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              res, reason = update_policy()
            elif event['RequestType'] == 'Delete':
              res, reason = delete_policy()
            else:
              res = False
              reason = "Unknown operation: " + event['RequestType']
            responseData = {}
            responseData['Reason'] = reason
            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
          def update_policy():
            try:
              response = iam.update_account_password_policy(
                AllowUsersToChangePassword=True,
                HardExpiry=False,
                MaxPasswordAge=90,
                MinimumPasswordLength=14,
                RequireLowercaseCharacters=True,
                RequireNumbers=True,
                RequireSymbols=True,
                RequireUppercaseCharacters=True,
                PasswordReusePrevention=24
              )
              return(True, response)
            except Exception as e:
              return (False, "Cannot update policy: " + str(e))
          def delete_policy():
            try:
              policy = iam.get_account_password_policy()
              response = iam.delete_account_password_policy()
              return (True, response)
            except Exception as e:
              return (False, "Cannot delete policy: " + str(e))

  PasswordPolicyLogGroup:
    Condition: cIsHomeRegion
    #checkov:skip=CKV_AWS_158:LogGroup not encrypted
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PasswordPolicyFunction}"
      RetentionInDays: 7

  PasswordPolicyFunctionExecutionRole:
    Condition: cIsHomeRegion
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: PasswordCreatorPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              - Effect: Allow
                Action:
                  - iam:GetAccountPasswordPolicy
                  - iam:UpdateAccountPasswordPolicy
                  - iam:DeleteAccountPasswordPolicy
                Resource: "*"

  PasswordPolicyLambdaSchedule:
    Condition: cIsHomeRegion
    Type: AWS::Events::Rule
    Properties:
      Description: Schedule to invoke the PasswordPolicyFunction Lambda once a week
      ScheduleExpression: rate(7 days)
      State: ENABLED
      Targets:
        - Arn: !GetAtt PasswordPolicyFunction.Arn
          Id: PasswordPolicyFunctionScheduledInvocation
          Input: >
            {
              "RequestType": "Update"
            }

  PermissionForEventsToInvokeLambda:
    Condition: cIsHomeRegion
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PasswordPolicyFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PasswordPolicyLambdaSchedule.Arn

Outputs:
  NonceValue:
    Description: Just an output of the Nonce value
    Value: !Ref NonceValue
